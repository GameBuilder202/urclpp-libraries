BITS >= 8
OUTS 0
OPS 3
REG 5

// Load source to save to stack
LLOD R1 SP 2
JMP .remove_char__saveStringStack

.remove_char__saveStringStack__return
LOD R2 SP

// Load dest
ADD R2 R2 2
LLOD R1 SP R2

// Load index of char to be removed
ADD R2 R2 2
LLOD R4 SP R2
INC R4 R4

// Load size
POP R2
DEC R2 R2

 // Loop counter / Address to store to
IMM R3 1

// Main loop
.remove_char_Loop
    // End loop if index is greater to size
    BRG .remove_char_LoopEnd R3 R2
    // If our index is the index to be removed, skip this char
    BRE .remove_char_LoopSkip R3 R4

    .remove_char_LoopSkip__return
    // Write chars to dest
    POP R5
    LSTR R1 R3 R5
    INC R3 R3

    JMP .remove_char_Loop

.remove_char_LoopSkip
    POP	R0
    JMP .remove_char_LoopSkip__return

.remove_char_LoopEnd
// R2 already holds new string size since it was decremented earlier
STR R1 R2
RET


// Saves string to stack in reverse order
// Inputs -
// R1: const string*
.remove_char__saveStringStack
    LOD R2 R1
    .remove_char__saveStringStackLoop
    BRZ .remove_char__saveStringStackEnd R2
    LOD R3 R2
    PSH R3
    DEC R2 R2
    JMP .remove_char__saveStringStackLoop

.remove_char__saveStringStackEnd
    // Push lenght at the end so it is POP-ed first
    LOD R2 R1
    PSH R2
    JMP .remove_char__saveStringStack__return
